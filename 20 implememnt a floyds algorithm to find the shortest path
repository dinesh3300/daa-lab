#include <stdio.h>
#include <limits.h>

#define INF INT_MAX

int findCity(int n, int edges[][3], int edgesSize, int distanceThreshold) {
    int dist[n][n];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) dist[i][j] = 0;
            else dist[i][j] = INF;
        }
    }

    for (int i = 0; i < edgesSize; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        int w = edges[i][2];
        dist[u][v] = w;
        dist[v][u] = w;
    }

    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][k] < INF && dist[k][j] < INF) {
                    if (dist[i][j] > dist[i][k] + dist[k][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
    }

    int maxCount = 0;
    int resultCity = -1;
    for (int i = 0; i < n; i++) {
        int count = 0;
        for (int j = 0; j < n; j++) {
            if (dist[i][j] <= distanceThreshold) {
                count++;
            }
        }
        if (count > maxCount) {
            maxCount = count;
            resultCity = i;
        }
    }

    return resultCity;
}

int main() {
    int edges[4][3] = { {0, 1, 3}, 
                        {1, 2, 1}, 
                        {1, 3, 4}, 
                        {2, 3, 1} };
    int n = 4;
    int distanceThreshold = 4;

    int city = findCity(n, edges, 4, distanceThreshold);
    printf("City with the most neighbors within distance threshold: %d\n", city);

    return 0;
}
