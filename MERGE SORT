#include <stdio.h>
#include <stdlib.h>

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    
    int *L = (int *)malloc(n1 * sizeof(int));
    int *R = (int *)malloc(n2 * sizeof(int));

    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }

    while (i < n1)
        arr[k++] = L[i++];
    while (j < n2)
        arr[k++] = R[j++];
    
    free(L);
    free(R);
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

int main() {
    int arr1[] = {31, 23, 35, 27, 11, 21, 15, 28};
    int arr2[] = {22, 34, 25, 36, 43, 67, 52, 13, 65, 17};

    mergeSort(arr1, 0, sizeof(arr1)/sizeof(arr1[0]) - 1);
    mergeSort(arr2, 0, sizeof(arr2)/sizeof(arr2[0]) - 1);

    printf("Sorted array 1: ");
    for (int i = 0; i < sizeof(arr1)/sizeof(arr1[0]); i++)
        printf("%d ", arr1[i]);
    printf("\n");

    printf("Sorted array 2: ");
    for (int i = 0; i < sizeof(arr2)/sizeof(arr2[0]); i++)
        printf("%d ", arr2[i]);
    printf("\n");

    return 0;
}
