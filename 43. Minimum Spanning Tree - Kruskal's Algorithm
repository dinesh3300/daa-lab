#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int u, v, w;
} Edge;

typedef struct {
    int* parent;
    int* rank;
    int size;
} DisjointSet;

DisjointSet* createSet(int n) {
    DisjointSet* ds = (DisjointSet*)malloc(sizeof(DisjointSet));
    ds->size = n;
    ds->parent = (int*)malloc(n * sizeof(int));
    ds->rank = (int*)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        ds->parent[i] = i;
        ds->rank[i] = 0;
    }
    return ds;
}

int find(DisjointSet* ds, int u) {
    if (ds->parent[u] != u) {
        ds->parent[u] = find(ds, ds->parent[u]);
    }
    return ds->parent[u];
}

void unionSets(DisjointSet* ds, int u, int v) {
    int rootU = find(ds, u);
    int rootV = find(ds, v);
    if (rootU != rootV) {
        if (ds->rank[rootU] > ds->rank[rootV]) {
            ds->parent[rootV] = rootU;
        } else if (ds->rank[rootU] < ds->rank[rootV]) {
            ds->parent[rootU] = rootV;
        } else {
            ds->parent[rootV] = rootU;
            ds->rank[rootU]++;
        }
    }
}

int compareEdges(const void* a, const void* b) {
    return ((Edge*)a)->w - ((Edge*)b)->w;
}

void kruskal(Edge* edges, int n, int m) {
    DisjointSet* ds = createSet(n);
    qsort(edges, m, sizeof(Edge), compareEdges);
    int total_weight = 0;
    for (int i = 0; i < m; i++) {
        Edge e = edges[i];
        if (find(ds, e.u) != find(ds, e.v)) {
            printf("Edge %d-%d with weight %d included in MST\n", e.u, e.v, e.w);
            unionSets(ds, e.u, e.v);
            total_weight += e.w;
        }
    }
    printf("Total weight of MST: %d\n", total_weight);
    free(ds->parent);
    free(ds->rank);
    free(ds);
}

int main() {
    Edge edges1[] = {
        {0, 1, 10}, {0, 2, 6}, {0, 3, 5},
        {1, 3, 15}, {2, 3, 4}
    };
    int n1 = 4;
    int m1 = sizeof(edges1) / sizeof(edges1[0]);
    kruskal(edges1, n1, m1);

    Edge edges2[] = {
        {0, 1, 4}, {0, 2, 3},
        {1, 2, 1}, {1, 3, 2},
        {2, 3, 5}
    };
    int n2 = 4;
    int m2 = sizeof(edges2) / sizeof(edges2[0]);
    kruskal(edges2, n2, m2);

    return 0;
}
