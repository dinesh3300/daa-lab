#include <stdio.h>
#include <stdlib.h>

int knapsack(int* values, int* weights, int n, int capacity) {
    int* dp = (int*)malloc((capacity + 1) * sizeof(int));
    for (int i = 0; i <= capacity; i++) {
        dp[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        for (int w = capacity; w >= weights[i]; w--) {
            dp[w] = (dp[w] > dp[w - weights[i]] + values[i]) ? dp[w] : (dp[w - weights[i]] + values[i]);
        }
    }

    int result = dp[capacity];
    free(dp);
    return result;
}

int main() {
    int values1[] = {60, 100, 120};
    int weights1[] = {10, 20, 30};
    int capacity1 = 50;
    printf("Maximum value in Knapsack: %d\n", knapsack(values1, weights1, sizeof(values1) / sizeof(values1[0]), capacity1));

    int values2[] = {10, 20, 30, 40};
    int weights2[] = {1, 2, 3, 8};
    int capacity2 = 10;
    printf("Maximum value in Knapsack: %d\n", knapsack(values2, weights2, sizeof(values2) / sizeof(values2[0]), capacity2));

    return 0;
}
