#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int start, end, weight;
} Job;

int compareJobs(const void* a, const void* b) {
    return ((Job*)a)->end - ((Job*)b)->end;
}

int binarySearch(Job* jobs, int index) {
    int low = 0, high = index - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (jobs[mid].end <= jobs[index].start) {
            if (jobs[mid + 1].end <= jobs[index].start) {
                low = mid + 1;
            } else {
                return mid;
            }
        } else {
            high = mid - 1;
        }
    }
    return -1;
}

int weightedIntervalScheduling(Job* jobs, int n) {
    qsort(jobs, n, sizeof(Job), compareJobs);
    int* dp = (int*)malloc(n * sizeof(int));
    dp[0] = jobs[0].weight;

    for (int i = 1; i < n; i++) {
        int includeWeight = jobs[i].weight;
        int l = binarySearch(jobs, i);
        if (l != -1) {
            includeWeight += dp[l];
        }
        dp[i] = (includeWeight > dp[i - 1]) ? includeWeight : dp[i - 1];
    }
    int result = dp[n - 1];
    free(dp);
    return result;
}

int main() {
    Job jobs1[] = {
        {1, 3, 50},
        {2, 5, 10},
        {4, 6, 70},
        {6, 8, 60}
    };
    int n1 = sizeof(jobs1) / sizeof(jobs1[0]);
    printf("Maximum profit: %d\n", weightedIntervalScheduling(jobs1, n1));

    Job jobs2[] = {
        {1, 4, 3},
        {3, 5, 4},
        {0, 6, 8},
        {5, 7, 6},
        {8, 9, 2}
    };
    int n2 = sizeof(jobs2) / sizeof(jobs2[0]);
    printf("Maximum profit: %d\n", weightedIntervalScheduling(jobs2, n2));

    return 0;
}
