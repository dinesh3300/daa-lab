#include <stdio.h>
#include <stdlib.h>

int merge(int* arr, int* temp, int left, int mid, int right) {
    int i = left, j = mid, k = left;
    int inv_count = 0;

    while (i <= mid - 1 && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            inv_count += (mid - i);
        }
    }

    while (i <= mid - 1) {
        temp[k++] = arr[i++];
    }

    while (j <= right) {
        temp[k++] = arr[j++];
    }

    for (i = left; i <= right; i++) {
        arr[i] = temp[i];
    }

    return inv_count;
}

int mergeSort(int* arr, int* temp, int left, int right) {
    int mid, inv_count = 0;
    if (left < right) {
        mid = (left + right) / 2;
        inv_count += mergeSort(arr, temp, left, mid);
        inv_count += mergeSort(arr, temp, mid + 1, right);
        inv_count += merge(arr, temp, left, mid + 1, right);
    }
    return inv_count;
}

int countInversions(int* arr, int n) {
    int* temp = (int*)malloc(n * sizeof(int));
    int inv_count = mergeSort(arr, temp, 0, n - 1);
    free(temp);
    return inv_count;
}

int main() {
    int arr1[] = {2, 3, 8, 6, 1};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    printf("Number of inversions: %d\n", countInversions(arr1, n1));

    int arr2[] = {1, 20, 6, 4, 5};
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    printf("Number of inversions: %d\n", countInversions(arr2, n2));

    return 0;
}
