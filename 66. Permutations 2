#include <stdio.h>
#include <stdlib.h>

void permuteUniqueUtil(int* nums, int* visited, int start, int end, int* temp, int tempSize) {
    if (tempSize == end) {
        for (int i = 0; i < tempSize; i++)
            printf("%d ", temp[i]);
        printf("\n");
        return;
    }
    for (int i = 0; i < end; i++) {
        if (visited[i] || (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]))
            continue;
        visited[i] = 1;
        temp[tempSize] = nums[i];
        permuteUniqueUtil(nums, visited, 0, end, temp, tempSize + 1);
        visited[i] = 0;
    }
}

void permuteUnique(int* nums, int n) {
    int* temp = (int*)malloc(n * sizeof(int));
    int* visited = (int*)calloc(n, sizeof(int));
    qsort(nums, n, sizeof(int), (int (*)(const void*, const void*)) strcmp);
    permuteUniqueUtil(nums, visited, 0, n, temp, 0);
    free(temp);
    free(visited);
}

int main() {
    int nums[] = {1, 1, 2};
    int n = sizeof(nums) / sizeof(nums[0]);
    permuteUnique(nums, n);
    return 0;
}
