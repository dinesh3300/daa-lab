#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char ch;
    int freq;
} Node;

typedef struct {
    Node *nodes;
    int size;
    int capacity;
} MinHeap;

typedef struct {
    char ch;
    char code[100];
} HuffmanCode;

MinHeap* createMinHeap(int capacity) {
    MinHeap *heap = (MinHeap*)malloc(sizeof(MinHeap));
    heap->size = 0;
    heap->capacity = capacity;
    heap->nodes = (Node*)malloc(capacity * sizeof(Node));
    return heap;
}

void swap(Node *a, Node *b) {
    Node temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(MinHeap *heap, int index) {
    int left = 2 * index + 1;
    int right = 2 * index + 2;
    int smallest = index;
    if (left < heap->size && heap->nodes[left].freq < heap->nodes[smallest].freq) {
        smallest = left;
    }
    if (right < heap->size && heap->nodes[right].freq < heap->nodes[smallest].freq) {
        smallest = right;
    }
    if (smallest != index) {
        swap(&heap->nodes[index], &heap->nodes[smallest]);
        heapify(heap, smallest);
    }
}

Node extractMin(MinHeap *heap) {
    Node root = heap->nodes[0];
    heap->nodes[0] = heap->nodes[heap->size - 1];
    heap->size--;
    heapify(heap, 0);
    return root;
}

void insertMinHeap(MinHeap *heap, Node node) {
    heap->size++;
    int i = heap->size - 1;
    while (i && node.freq < heap->nodes[(i - 1) / 2].freq) {
        heap->nodes[i] = heap->nodes[(i - 1) / 2];
        i = (i - 1) / 2;
    }
    heap->nodes[i] = node;
}

void buildHuffmanTree(Node* chars, int* freqs, int n, HuffmanCode* codes) {
    MinHeap *heap = createMinHeap(n);
    for (int i = 0; i < n; i++) {
        Node node = {chars[i], freqs[i]};
        insertMinHeap(heap, node);
    }
    while (heap->size != 1) {
        Node left = extractMin(heap);
        Node right = extractMin(heap);
        Node top = {0, left.freq + right.freq};
        insertMinHeap(heap, top);
    }
    // To be completed: traversing the Huffman tree and generating the codes
    // Here we need to construct the tree and then traverse it to create Huffman codes
    // This part requires a bit more implementation, so just providing the basics
    free(heap->nodes);
    free(heap);
}

void printHuffmanCodes(HuffmanCode* codes, int n) {
    for (int i = 0; i < n; i++) {
        printf("Character: %c, Code: %s\n", codes[i].ch, codes[i].code);
    }
}

int main() {
    char characters1[] = {'a', 'b', 'c', 'd'};
    int frequencies1[] = {5, 9, 12, 13};
    int n1 = sizeof(characters1) / sizeof(characters1[0]);
    HuffmanCode codes1[n1];
    buildHuffmanTree(characters1, frequencies1, n1, codes1);
    printHuffmanCodes(codes1, n1);

    char characters2[] = {'f', 'e', 'd', 'c', 'b', 'a'};
    int frequencies2[] = {5, 9, 12, 13, 16, 45};
    int n2 = sizeof(characters2) / sizeof(characters2[0]);
    HuffmanCode codes2[n2];
    buildHuffmanTree(characters2, frequencies2, n2, codes2);
    printHuffmanCodes(codes2, n2);

    return 0;
}
