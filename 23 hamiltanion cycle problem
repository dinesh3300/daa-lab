#include <stdio.h>
#include <stdbool.h>

#define V 5

bool isSafe(int graph[V][V], int path[], int pos, int v) {
    if (graph[path[pos-1]][v] == 0)
        return false;
    for (int i = 0; i < pos; i++) {
        if (path[i] == v)
            return false;
    }
    return true;
}

bool hamiltonianCycleUtil(int graph[V][V], int path[], int pos) {
    if (pos == V) {
        return graph[path[pos-1]][path[0]] == 1;
    }

    for (int v = 1; v < V; v++) {
        if (isSafe(graph, path, pos, v)) {
            path[pos] = v;
            if (hamiltonianCycleUtil(graph, path, pos + 1))
                return true;
            path[pos] = -1;
        }
    }
    return false;
}

bool hamiltonianCycle(int graph[V][V]) {
    int path[V];
    for (int i = 0; i < V; i++)
        path[i] = -1;

    path[0] = 0;
    if (hamiltonianCycleUtil(graph, path, 1) == false) {
        printf("Solution does not exist\n");
        return false;
    }

    printf("Solution exists: ");
    for (int i = 0; i < V; i++)
        printf("%d ", path[i]);
    printf("%d\n", path[0]);

    return true;
}

int main() {
    int graph1[V][V] = { {0, 1, 1, 1, 0},
                         {1, 0, 1, 1, 1},
                         {1, 1, 0, 1, 1},
                         {1, 1, 1, 0, 1},
                         {0, 1, 1, 1, 0} };

    hamiltonianCycle(graph1);

    return 0;
}
