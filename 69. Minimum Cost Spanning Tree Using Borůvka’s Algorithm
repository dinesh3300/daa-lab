#include <stdio.h>
#include <limits.h>
#include <stdlib.h>

#define V 4
#define E 5

typedef struct {
    int u, v, w;
} Edge;

int find(int parent[], int i) {
    if (parent[i] == i)
        return i;
    return find(parent, parent[i]);
}

void unionSet(int parent[], int x, int y) {
    int xroot = find(parent, x);
    int yroot = find(parent, y);
    parent[xroot] = yroot;
}

void boruvkaMST(Edge edges[], int V, int E) {
    int parent[V];
    int cheapest[V];
    Edge result[V - 1];
    int numTrees = V;
    int numEdges = 0;

    for (int i = 0; i < V; i++) {
        parent[i] = i;
        cheapest[i] = -1;
    }

    while (numTrees > 1) {
        for (int i = 0; i < E; i++) {
            int set1 = find(parent, edges[i].u);
            int set2 = find(parent, edges[i].v);
            if (set1 != set2) {
                if (cheapest[set1] == -1 || cheapest[set1] > edges[i].w)
                    cheapest[set1] = i;
                if (cheapest[set2] == -1 || cheapest[set2] > edges[i].w)
                    cheapest[set2] = i;
            }
        }
        for (int i = 0; i < V; i++) {
            if (cheapest[i] != -1) {
                int u = edges[cheapest[i]].u;
                int v = edges[cheapest[i]].v;
                int set1 = find(parent, u);
                int set2 = find(parent, v);
                if (set1 != set2) {
                    result[numEdges++] = edges[cheapest[i]];
                    unionSet(parent, set1, set2);
                    numTrees--;
                }
            }
            cheapest[i] = -1;
        }
    }

    printf("Edge \tWeight\n");
    for (int i = 0; i < numEdges; i++)
        printf("%d - %d \t%d \n", result[i].u, result[i].v, result[i].w);
}

int main() {
    Edge edges[E] = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };
    boruvkaMST(edges, V, E);
    return 0;
}
